/*!
 * Banquette DependencyInjection v0.0.0 (CommonJS)
 * (c) 2022-2022 Julien Pinto
 * Released under Apache License, Version 2.0
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@banquette/exception/_cjs/prod/usage.exception"),t=require("@banquette/utils-reflection/_cjs/prod/get-constructor-arguments-types"),n=require("@banquette/utils-type/_cjs/prod/ensure-array"),i=require("@banquette/utils-type/_cjs/prod/is-function"),r=require("@banquette/utils-type/_cjs/prod/is-symbol"),s=require("@banquette/utils-type/_cjs/prod/is-undefined"),a=require("./metadata.container.js");function buildInjectableMetadata(e){var t=a.MetadataContainer.Get(e);return null!==t||(t={identifier:e,ctor:e,singleton:!1,tags:[],constructorDependencies:[],propertiesDependencies:{}},a.MetadataContainer.Set(t)),t}function getInjectableType(t,a){if(s.isUndefined(t))throw new e.UsageException("Circular dependency detected. Use the @InjectLazy decorator to workaround it.");if(!i.isFunction(t)&&!r.isSymbol(t))throw new e.UsageException('The built-in container only support constructors as identifiers (or symbols for multi inject). If you need a more robust dependency injection system, consider installing "@banquette/inversify" that will create a bridge between Inversify and all the internal services so you can use it instead of the built-in container.');return{eager:!1===a?t:null,lazy:!0===a?t:null,tags:s.isUndefined(a)?n.ensureArray(t):null}}exports.buildInjectableMetadata=buildInjectableMetadata,exports.getInjectableType=getInjectableType,exports.registerExplicitDependency=function registerExplicitDependency(t,n,i,r,a){var c=buildInjectableMetadata(t),o=getInjectableType(n,i);if(s.isUndefined(r)){if(!s.isUndefined(a)){for(var u=0;u<=a;++u)c.constructorDependencies.length<=u&&(c.constructorDependencies[u]=void 0);c.constructorDependencies[a]=o}}else{if(!s.isUndefined(c.propertiesDependencies[r]))throw new e.UsageException("You can't inject multiple values into a property (".concat(r,")."));c.propertiesDependencies[r]={type:o,propertyName:r,parameterIndex:a}}return c},exports.registerImplicitDependencies=function registerImplicitDependencies(e){for(var n=buildInjectableMetadata(e),i=t.getConstructorArgumentsTypes(e),r=0;r<i.length;++r)(n.constructorDependencies.length<=r||s.isUndefined(n.constructorDependencies[r]))&&(n.constructorDependencies[r]=getInjectableType(i[r],!1));return n};
