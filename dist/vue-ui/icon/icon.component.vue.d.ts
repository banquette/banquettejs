import { Vue } from "@banquette/vue-typescript/vue";
export default class IconComponent extends Vue {
    /**
     * Elements' tags are stored by their index in this array to reduce the size of the data structure.
     * Only used if icons are added via the `icons` prop.
     */
    private static TagsMap;
    /**
     * Name of the icon to display.
     */
    name: string;
    /**
     * Set into which the icon belongs (i.e. material, remix, ...).
     */
    set: string;
    /**
     * Version of the icon, if applicable.
     * If `null`, the first available version will be used if the icon is rendered via local data.
     * Otherwise, the "real" icon component will be in charge of choosing the right version.
     */
    version: string;
    /**
     * Should the whitespaces around the illustration be removed?
     */
    crop: string;
    /**
     * Width and height on which to render the icon.
     */
    width: string | null;
    height: string | null;
    /**
     * Color to use as fill for the svg.
     */
    color: string;
    /**
     * An input object describing any number of icons, to store in memory.
     * This object is meant to be generated by the Banquette utility on the documentation website.
     */
    icons: [string[], Record<string, any>[]] | null;
    get iconName(): string;
    get localSetIndex(): number;
    /**
     * Check whether the icon is defined globally inside the Vue app.
     * That's our fallback, so if it's not there, we're done.
     */
    get isAmbient(): boolean;
    /**
     * Check if the icon is defined locally, using the `icons` prop.
     */
    get isLocal(): boolean;
    /**
     * Try to render the icon's svg.
     */
    render(context: any): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> | "?";
}
